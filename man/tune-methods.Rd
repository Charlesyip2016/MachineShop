% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tune.R
\docType{methods}
\name{tune}
\alias{tune}
\alias{tune,function,data.frame-method}
\alias{tune,function,formula-method}
\alias{tune,function,recipe-method}
\title{Model Tuning}
\usage{
tune(object, x, ...)

\S4method{tune}{`function`,data.frame}(object, x, control = CVControl(),
  grid = data.frame(), metric = 1, stat = mean, maximize = TRUE)

\S4method{tune}{`function`,formula}(object, x, data,
  control = CVControl(), grid = data.frame(), metric = 1,
  stat = mean, maximize = TRUE)

\S4method{tune}{`function`,recipe}(object, x, control = CVControl(),
  grid = data.frame(), metric = 1, stat = mean, maximize = TRUE)
}
\arguments{
\item{object}{constructor function for the model.}

\item{x}{defined relationship between model predictors and an outcome.  May
be a model.frame (data.frame) containing a formula, data, and optionally case
weights; a formula; or a recipe.}

\item{...}{arguments passed to other methods.}

\item{control}{\code{\linkS4class{MLControl}} object defining and controlling
the resampling method to be employed.}

\item{grid}{data frame containing parameter values over which to evaluate the
\code{object} model function.}

\item{metric}{numeric index or character name of the performance metric to
use in selecting the best model.}

\item{stat}{function to compute a summary statistic on resampled values of
the metric for model selection.  The supplied function should contain a
\code{na.rm} argument in its definition.}

\item{maximize}{logical indicating whether to select the model having the
maximum or minimum value of the performance metric.}

\item{data}{data frame containing observed predictors and outcomes.}
}
\value{
MLModelTune class object that inherits from MLModel.
}
\description{
Evaluate a model over a grid of tuning parameters and select the best one
according to resample estimation of predictive performance.
}
\examples{
\donttest{
## Survival analysis example
library(survival)

fo <- Surv(time, status) ~ age + sex + ph.ecog + ph.karno + pat.karno +
                           meal.cal + wt.loss

(gbmtune <- tune(GBMModel, fo, data = lung,
                 control = CVControl(folds = 10, repeats = 5,
                                     survtimes = 365 * c(0.5, 1, 1.5)),
                 grid = expand.grid(n.trees = c(25, 50, 100),
                                    interaction.depth = 1:3,
                                    n.minobsinnode = c(5, 10))))
summary(gbmtune)
plot(gbmtune, type = "line", metrics = c("ROC", "Brier"))

gbmfit <- fit(gbmtune, fo, data = lung)
(vi <- varimp(gbmfit))
plot(vi)
}

}
\seealso{
\code{\link[stats]{model.frame}}, \code{\link[recipes]{recipe}},
\code{\link{BootControl}}, \code{\link{CVControl}}, \code{\link{OOBControl}},
\code{\link{fit}}, \code{\link{resample}}, \code{\link{plot}},
\code{\link{summary}}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tune.R
\name{tune}
\alias{tune}
\alias{tune.formula}
\alias{tune.matrix}
\alias{tune.ModelFrame}
\alias{tune.recipe}
\alias{tune.MLModel}
\alias{tune.MLModelFunction}
\title{Model Tuning and Selection}
\usage{
tune(x, ...)

\method{tune}{formula}(x, data, model, ...)

\method{tune}{matrix}(x, y, model, ...)

\method{tune}{ModelFrame}(x, model, ...)

\method{tune}{recipe}(x, model, ...)

\method{tune}{MLModel}(x, ...)

\method{tune}{MLModelFunction}(x, ...)
}
\arguments{
\item{x}{defines a relationship between model predictor and response
variables.  May be a \code{\link{formula}}, design \code{\link{matrix}} of
predictors, \code{\link{ModelFrame}}, untrained
\code{\link[recipes]{recipe}}, \code{\link{SelectedRecipe}}, or
\code{\link{TunedRecipe}} object. Alternatively, a \link[=models]{model}
function or call may be given first followed by objects defining the
predictor and response relationship and the other tuning argument values.}

\item{...}{arguments passed to other methods.}

\item{data}{\link[=data.frame]{data frame} containing observed predictors and
outcomes.}

\item{model}{\link[=models]{model} function, function name, or call.  Supply
a \code{\link{SelectedModel}} object for model selection or a
\code{\link{TunedModel}} object for model tuning.}

\item{y}{response variable.}
}
\value{
\code{MLModel} class object containing the tuning results.
}
\description{
Predictive peformance-based tuning of a model over a grid of parameters
values or selection from a set of candidate models.
}
\examples{
\donttest{
## Numeric response example
fo <- sale_amount ~ .

# User-specified grid
model1 <- TunedModel(GBMModel,
                     grid = expand_params(n.trees = c(25, 50, 100),
                                          interaction.depth = 1:3,
                                          n.minobsinnode = c(5, 10)),
                     control = CVControl(folds = 10, repeats = 5))
(gbm_tune1 <- tune(fo, data = ICHomes, model = model1))

# Automatically generated grid
model2 <- TunedModel(GBMModel, grid = 3,
                     control = CVControl(folds = 10, repeats = 5))
(gbm_tune2 <- tune(fo, data = ICHomes, model = model2))

# Randomly sampled grid points
model3 <- TunedModel(GBMModel, grid = Grid(length = 1000, random = 10),
                     control = CVControl(folds = 10, repeats = 5))
(gbm_tune3 <- tune(fo, data = ICHomes, model = model3))

summary(gbm_tune1)
plot(gbm_tune1, type = "line")

gbm_fit <- fit(fo, data = ICHomes, model = gbm_tune1)
varimp(gbm_fit)
}

}
\seealso{
\code{\link{fit}}, \code{\link{performance}}, \code{\link{metrics}},
\code{\link{plot}}, \code{\link{summary}}
}
